<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Unique Task Manager</title>
  <style>
    :root {
      --bg: #f7f9fc;
      --card: #ffffff;
      --text: #333;
      --accent: #007bff;
      --complete: #28a745;
      --delete: #dc3545;
    }

    body.dark-mode {
      --bg: #121212;
      --card: #1f1f1f;
      --text: #f5f5f5;
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: var(--bg);
      color: var(--text);
      margin: 0;
      padding: 20px;
      transition: all 0.3s ease;
    }

    .container {
      max-width: 700px;
      margin: auto;
      background-color: var(--card);
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
    }

    .task-form input, .task-form button {
      padding: 10px;
      margin: 5px;
      font-size: 1em;
      border-radius: 6px;
      border: 1px solid #ccc;
    }

    .task-form button {
      background-color: var(--accent);
      color: white;
      cursor: pointer;
      border: none;
    }

    .task-form button:hover {
      background-color: #0056b3;
    }

    .stats {
      display: flex;
      justify-content: space-around;
      margin-top: 10px;
      font-weight: bold;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    li {
      background-color: #e9f0ff;
      padding: 12px;
      margin: 10px 0;
      border-radius: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
    }

    .dark-mode li {
      background-color: #2c2c2c;
    }

    .task-text {
      flex-grow: 1;
      margin-right: 10px;
    }

    .completed .task-text {
      text-decoration: line-through;
      color: gray;
    }

    .btn {
      border: none;
      border-radius: 5px;
      padding: 6px 10px;
      color: white;
      cursor: pointer;
      margin-left: 5px;
    }

    .btn-complete { background-color: var(--complete); }
    .btn-delete { background-color: var(--delete); }
    .btn-toggle-dark {
      float: right;
      background-color: #444;
    }

    .btn-toggle-dark:hover {
      background-color: #222;
    }

    @media screen and (max-width: 600px) {
      .stats {
        flex-direction: column;
        align-items: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>✅ Unique Task Manager</h1>
    <div class="task-form">
      <input type="text" id="taskInput" placeholder="Task name" />
      <input type="date" id="dueDate" />
      <input type="time" id="reminderTime" />
      <button onclick="addTask()">➕ Add</button>
      <button class="btn btn-toggle-dark" onclick="toggleDarkMode()">🌙</button>
    </div>

    <div class="stats">
      <span>Total: <span id="totalTasks">0</span></span>
      <span>Completed: <span id="completedTasks">0</span></span>
      <span>Pending: <span id="pendingTasks">0</span></span>
    </div>

    <ul id="taskList"></ul>
  </div>

  <script>
    let tasks = [];

    function updateStats() {
      document.getElementById("totalTasks").innerText = tasks.length;
      document.getElementById("completedTasks").innerText = tasks.filter(t => t.completed).length;
      document.getElementById("pendingTasks").innerText = tasks.filter(t => !t.completed).length;
    }

    function saveTasks() {
      localStorage.setItem("tasks", JSON.stringify(tasks));
    }

    function loadTasks() {
      const stored = localStorage.getItem("tasks");
      if (stored) {
        tasks = JSON.parse(stored);
        tasks.forEach(renderTask);
      }
      updateStats();
    }

    function renderTask(task) {
      const list = document.getElementById("taskList");
      const li = document.createElement("li");
      li.setAttribute("data-id", task.id);
      if (task.completed) li.classList.add("completed");

      const span = document.createElement("span");
      span.className = "task-text";
      span.innerText = `${task.text} (Due: ${task.dueDate || "N/A"})`;
      li.appendChild(span);

      const btnComplete = document.createElement("button");
      btnComplete.className = "btn btn-complete";
      btnComplete.innerText = "✔";
      btnComplete.onclick = () => toggleComplete(task.id);
      li.appendChild(btnComplete);

      const btnDelete = document.createElement("button");
      btnDelete.className = "btn btn-delete";
      btnDelete.innerText = "🗑️";
      btnDelete.onclick = () => deleteTask(task.id);
      li.appendChild(btnDelete);

      list.appendChild(li);
    }

    function refreshTasks() {
      document.getElementById("taskList").innerHTML = "";
      tasks.forEach(renderTask);
      updateStats();
    }

    function addTask() {
      const input = document.getElementById("taskInput");
      const due = document.getElementById("dueDate").value;
      const time = document.getElementById("reminderTime").value;
      const text = input.value.trim();

      if (!text) {
        alert("Please enter a task name.");
        return;
      }

      const id = Date.now();
      const task = {
        id,
        text,
        dueDate: due,
        reminderTime: time,
        completed: false
      };

      tasks.push(task);
      saveTasks();
      renderTask(task);
      updateStats();

      if (due && time) {
        const reminder = new Date(`${due}T${time}`);
        const now = new Date();
        const delay = reminder - now;
        if (delay > 0) {
          setTimeout(() => {
            alert(`🔔 Reminder: "${text}" is due now!`);
          }, delay);
        }
      }

      input.value = "";
      document.getElementById("dueDate").value = "";
      document.getElementById("reminderTime").value = "";
    }

    function toggleComplete(id) {
      const task = tasks.find(t => t.id === id);
      if (task) {
        task.completed = !task.completed;
        saveTasks();
        refreshTasks();
      }
    }

    function deleteTask(id) {
      tasks = tasks.filter(t => t.id !== id);
      saveTasks();
      refreshTasks();
    }

    function toggleDarkMode() {
      document.body.classList.toggle("dark-mode");
    }

    window.onload = loadTasks;
  </script>
</body>
</html>
